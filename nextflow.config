#!/usr/bin/env nextflow


// Observation selection options
params.list_in = null //"List of observations to process, given in standard format.
                      //These will be crossmatched against PSRDB before job submission.
                      //List format must be:\n* Column 1 - Pulsar name\n* Column 2 - UTC\n* Column 3 - Observation PID\nTrailing columns may be left out if needed, but at a minimum the pulsar name must be provided.
params.utcs    = ""   // Start UTC for PSRDB search - returns only observations after this UTC timestamp
params.utce    = ""   // End UTC for PSRDB search - returns only observations before this UTC timestamp
params.obs_pid = ""   // Project ID for PSRDB search - return only observations matching this Project ID. If not provided, returns all observations.
params.pulsar  = ""   // Pulsar name for PSRDB search - returns only observations with this pulsar name. If not provided, returns all pulsars.

// Processing options
params.use_edge_subints = false // Use first and last 8 second subints of observation archives
params.fluxcal = false // Calibrate flux densities. Should only be done for calibrator observations
params.time_subs = [1, 32, 450]
params.freq_subs = [1, 29, 58, 116]


// MeerTime database options
params.psrdb_url   = "https://pulsars.org.au/api/graphql/" // URL for interacting with the database API
params.psrdb_token = "$PSRDB_TOKEN" // Token taken from enviroment variable and obtained using get_ingest_token.sh or get_token.sh


// Directory options (input/output)
params.input_path = "/fred/oz005/timing" // Path to the directories for each pulsar
params.output_path = "/fred/oz005/users/nswainst/meerpipe_testing_outputs" //Path where the data products are stored
params.calibrators_path = "/fred/oz005/users/aparthas/reprocessing_MK/poln_calibration" //Path with the jones matrices

// Options taken from the Configuration file for MeerTime pipeline (meerpipe)
params.user = "$USER"
params.email = "nswainston@swin.edu.au" //TODO make this better
params.type = "meertime" //Type of data
params.overwrite = true // Overwrite flag (completely overwrites old processing if True, partial overwrite of calibrated/reduced products if False)
// Redundent products - choose options for what products get deleted for space saving at the end of the pipeline
// Choices: none, add, calib, zap_noflux (separate by commas, no spaces)
params.redundant_products = ["add", "calib", "zap_noflux"]
params.pipe = "old" // Pipeline version (now deprecated - pipeline automatically does calibration when relevant)
params.flags = "saveall" // Processing flags : T, F, p, subband <number>, nozap, saveall
params.ref_freq_list = "/fred/oz005/meerpipe/configuration_files/928ch_frequency_reference.npy" //Reference frequency list for 928 channels

// Additional information for processing.
params.rm_cat = "/fred/oz005/users/aparthas/MSP_DataRelease/MeerPipe_Output/MeerTime_MSP_Census/meerpipe_rms_msps.txt"
params.dm_cat = "/fred/oz005/users/aparthas/MSP_DataRelease/MeerPipe_Output/MeerTime_MSP_Census/meerpipe_dms_msps.txt"

// Custom ephemerides and template paths
params.meertime_templates   = "/fred/oz005/users/acameron/pipeline_stuff/andrew_meerpipe_dev/live_materials/project_repos/MeerTIME_PTA/pta_templates"
params.meertime_ephemerides = "/fred/oz005/users/acameron/pipeline_stuff/andrew_meerpipe_dev/live_materials/project_repos/MeerTIME_PTA/pta_ephemerides"

params.decimation_products = "/fred/oz005/users/acameron/pipeline_stuff/andrew_meerpipe_dev/live_materials/decimation_lists/pta_decimation.list" //Additional information for processing.
params.rfi_alg = "MG" // RFI routine (CG or CHIVE)
// Path which stores the parameters used to produce diagnostic TOA plots for each pulsar
params.toa_display_list = "/fred/oz005/users/acameron/pipeline_stuff/andrew_meerpipe_dev/live_materials/toa_lists/pta_toas.list"
//Path to store the global TOA images produced for each pulsar
params.global_toa_path = "/fred/oz005/users/nswainst/meerpipe_testing_outputs/toa_images"


// OUTPUT VISUALISATION OPTIONS
// ----------------------------------------------------------------------------
params.output_vis = false
if ( params.output_vis ) {
    dag {
        enabled   = true
        overwrite = true
        file      = "${params.output_vis}_dag.png"
    }
    report {
        enabled   = true
        overwrite = true
        file      = "${params.output_vis}_report.html"
    }
    timeline {
        enabled   = true
        overwrite = true
        file      = "${params.output_vis}_timeline.html"
    }
    trace {
        enabled   = true
        overwrite = true
        file      = "${params.output_vis}_trace.txt"
    }
}


// Memory and duration calculation fucntions
// ----------------------------------------------------------------------------
def vcsbeam_temp_mem(dur, npoints) {
    // Return memory on SSD/NVME needed fo the VCSbeam files in MB
    // dur is in seconds
    // npoints is number of pointins which is set as 2.5 for the IPFB to allow enough room
    return (int) ( params.temp_mem_sec * Float.valueOf(dur) * npoints + 2000 )
}
def presto_temp_mem(dur, ndms_job) {
    // Return memory on SSD/NVME needed fo the presto search files in MB
    // dur is in seconds
    // ndms_job is the number of dedispersion jobs
    return (int) ( 0.12 * Float.valueOf(dur) * Float.valueOf(ndms_job) )
}


// CLUSTER SPECFIC DEFAULTS
// ----------------------------------------------------------------------------
def hostname = "hostname".execute().text.trim().replace("-", "")
if ( hostname.startsWith("tooarrana") ) {
    // Set up for OzStars new Ngarrgu Tindebeek cluster

    // Set up containers
    // process.module = 'apptainer'
    // singularity {
    //     enabled = true
    //     runOptions = '--nv -B /nvmetmp'
    //     envWhitelist = 'SINGULARITY_BINDPATH, SINGULARITYENV_LD_LIBRARY_PATH'
    // }
    // params.containerDir = '/pawsey/mwa/singularity'

    // Default directories
    workDir = "/fred/oz005/users/${USER}/work"

    process {
        cache = 'lenient'
        // Resource set up
        withLabel: cpu {
            // queue = 'workq'
            cpus = 1
            executor = 'slurm'
            memory = "10 GB"
        }
        // Software dependency set up
        withLabel: meerpipe {
            beforeScript = 'source  /fred/oz005/users/nswainst/code/meerpipe/env_setup.sh; source /home/nswainst/venv/bin/activate'
        }
        withLabel: psrchive {
            beforeScript = 'module use /apps/users/pulsar/milan/gcc-11.3.0/modulefiles; module load psrchive/c216582a0'
        }
        withLabel: coast_guard {
            beforeScript = 'module use /apps/users/pulsar/milan/gcc-11.3.0/modulefiles; module load coast_guard/56b8d81'
        }
    }
    executor.submitRateLimit = '100 sec'
    executor.$slurm.queueSize = 1000
}
else if ( hostname.startsWith("farnarkle") ) {
    // Set up for Swinburnes's Ozstar cluster
}
else {
    // No recognised hostname so assuming defaults

    // Resource set up
    executor.name = 'local'
    executor.queueSize = 8

    // Set up containers
    docker.enabled = true
}

